{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Flower_Classification_with_TensorFlow_Using_CNN___Keras.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "TPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "X5CyMUZKJlRM"
      },
      "source": [
        "import os"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ig4_EBdBJ_9g",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c497075c-9efc-4268-a537-5b93fb557f05"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Oy8qvBGTtP0M"
      },
      "source": [
        "#import zipfile, os\n",
        "\n",
        "#local_zip = '/content/drive/MyDrive/budug asu/flowers'\n",
        "#zip_ref = zipfile.ZipFile(local_zip, 'r')\n",
        "#zip_ref.extractall('Dataset3')\n",
        "#zip_ref.close()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6KxmwsCPLlxg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a7d4192b-3be6-42b8-a5d4-d1a7c5f6b4b9"
      },
      "source": [
        "data_dir = '/content/drive/MyDrive/budug asu/flowers'\n",
        "print(os.listdir(data_dir))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['sunflower', 'rose', 'tulip', 'daisy', 'dandelion']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4F8h05soMUXf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2e52874e-a99c-4a0c-aeef-025b0570ec9b"
      },
      "source": [
        "pip install split-folders"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting split-folders\n",
            "  Downloading split_folders-0.4.3-py3-none-any.whl (7.4 kB)\n",
            "Installing collected packages: split-folders\n",
            "Successfully installed split-folders-0.4.3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HgBVlUwEMaZV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0214e51a-f1d3-4c4d-ab0a-b1420a706821"
      },
      "source": [
        "import splitfolders\n",
        "\n",
        "splitfolders.ratio('/content/drive/MyDrive/budug asu/flowers', output=\"Dataset4_split\", seed=42, ratio=(.80, .19, .01), group_prefix=None)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Copying files: 4253 files [01:10, 60.51 files/s] \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cbykCYLmMswm"
      },
      "source": [
        "import os\n",
        "base_dir = 'Dataset4_split'"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r2086TUrQCww"
      },
      "source": [
        "train_dir = os.path.join(base_dir, 'train')\n",
        "val_dir = os.path.join(base_dir, 'val')\n",
        "test_dir = os.path.join(base_dir, 'test')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "14SuSVGqQQX5"
      },
      "source": [
        "train_sunflower = os.path.join(train_dir, 'sunflower')\n",
        "train_daisy = os.path.join(train_dir, 'daisy')\n",
        "train_rose = os.path.join(train_dir, 'rose')\n",
        "train_tulip = os.path.join(train_dir, 'tulip')\n",
        "train_dandelion = os.path.join(train_dir, 'dandelion')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A1XYDJiKQxll"
      },
      "source": [
        "val_sunflower = os.path.join(train_dir, 'sunflower')\n",
        "val_daisy = os.path.join(train_dir, 'daisy')\n",
        "val_rose = os.path.join(train_dir, 'rose')\n",
        "val_tulip = os.path.join(train_dir, 'tulip')\n",
        "val_dandelion = os.path.join(train_dir, 'dandelion')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x-yDF0lISOaD"
      },
      "source": [
        "test_sunflower = os.path.join(train_dir, 'sunflower')\n",
        "test_daisy = os.path.join(train_dir, 'daisy')\n",
        "test_rose = os.path.join(train_dir, 'rose')\n",
        "test_tulip = os.path.join(train_dir, 'tulip')\n",
        "test_dandelion = os.path.join(train_dir, 'dandelion')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YS8-TqOYSaK-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ebfd0639-275c-42bf-81d6-9aa93cb164ad"
      },
      "source": [
        "print('total training sunflower images:', len(os.listdir(train_sunflower)))\n",
        "print('total training daisy images:', len(os.listdir(train_daisy)))\n",
        "print('total training rose images:', len(os.listdir(train_rose)))\n",
        "print('total training tulip images:', len(os.listdir(train_tulip)))\n",
        "print('total training dandelion images:', len(os.listdir(train_dandelion)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "total training sunflower images: 585\n",
            "total training daisy images: 613\n",
            "total training rose images: 627\n",
            "total training tulip images: 764\n",
            "total training dandelion images: 812\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cI5-uHScTHCL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "30a9b482-df23-4be1-8986-ca3bbde97820"
      },
      "source": [
        "print('total validation sunflower images:', len(os.listdir(val_sunflower)))\n",
        "print('total validation daisy images:', len(os.listdir(val_daisy)))\n",
        "print('total validation rose images:', len(os.listdir(val_rose)))\n",
        "print('total validation tulip images:', len(os.listdir(val_tulip)))\n",
        "print('total validation dandelion images:', len(os.listdir(val_dandelion)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "total validation sunflower images: 585\n",
            "total validation daisy images: 613\n",
            "total validation rose images: 627\n",
            "total validation tulip images: 764\n",
            "total validation dandelion images: 812\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RXWtC5TVTHry",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c2ed14d8-8fb9-4711-87df-01abf9bda61e"
      },
      "source": [
        "print('total test sunflower images:', len(os.listdir(test_sunflower)))\n",
        "print('total test daisy images:', len(os.listdir(test_daisy)))\n",
        "print('total test rose images:', len(os.listdir(test_rose)))\n",
        "print('total test tulip images:', len(os.listdir(test_tulip)))\n",
        "print('total test dandelion images:', len(os.listdir(test_dandelion)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "total test sunflower images: 585\n",
            "total test daisy images: 613\n",
            "total test rose images: 627\n",
            "total test tulip images: 764\n",
            "total test dandelion images: 812\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fDE-BUrLTpgT"
      },
      "source": [
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "train_datagen = ImageDataGenerator(\n",
        "    rescale=1./225,\n",
        "    rotation_range=20,\n",
        "    horizontal_flip=True,\n",
        "    shear_range=0.2,\n",
        "    zoom_range=0.2,\n",
        ")\n",
        "\n",
        "val_datagen = ImageDataGenerator(\n",
        "    rescale=1./255\n",
        ")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e8VdiTs8TurE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9cc91fcf-8349-4587-b58b-24a61b1b17fe"
      },
      "source": [
        "train_generator = train_datagen.flow_from_directory(\n",
        "    train_dir,\n",
        "    target_size=(100,100),\n",
        "    batch_size=32,\n",
        "    class_mode='categorical',\n",
        "    color_mode='rgb',\n",
        "    shuffle=True\n",
        ")\n",
        "\n",
        "val_generator = val_datagen.flow_from_directory(\n",
        "    val_dir,\n",
        "    target_size=(100,100),\n",
        "    batch_size=32,\n",
        "    class_mode='categorical',\n",
        "    color_mode='rgb',\n",
        "    shuffle=True\n",
        ")\n",
        "\n",
        "test_generator = val_datagen.flow_from_directory(\n",
        "    test_dir,\n",
        "    target_size=(100,100),\n",
        "    batch_size=32,\n",
        "    class_mode='categorical',\n",
        "    color_mode='rgb',\n",
        "    shuffle=True\n",
        ")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 3399 images belonging to 5 classes.\n",
            "Found 804 images belonging to 5 classes.\n",
            "Found 47 images belonging to 5 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kAUikEcS4Mm1",
        "outputId": "805814ae-6561-4471-dd8e-21e0a273e7cc"
      },
      "source": [
        "train_generator.class_indices"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'daisy': 0, 'dandelion': 1, 'rose': 2, 'sunflower': 3, 'tulip': 4}"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6QH_1G45T-lA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e932b1d7-595f-414e-dac8-66685dd1971e"
      },
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Dropout, Conv2D, Activation, Flatten, MaxPool2D, BatchNormalization\n",
        "from tensorflow.keras.optimizers import Adam, RMSprop\n",
        "\n",
        "model1 = Sequential([\n",
        "                     Conv2D(32, kernel_size=3, activation='relu', input_shape=(100, 100, 3)),\n",
        "                     MaxPool2D(2,2),\n",
        "\n",
        "                     Conv2D(64, kernel_size=3, activation='relu'),\n",
        "                     MaxPool2D(2,2),\n",
        "                     BatchNormalization(),\n",
        "\n",
        "                     Conv2D(128, kernel_size=3, activation='relu'),\n",
        "                     MaxPool2D(2,2),\n",
        "\n",
        "                     Conv2D(256, kernel_size=3, activation='relu'),\n",
        "                     MaxPool2D(2,2),\n",
        "                     \n",
        "                     Conv2D(512, kernel_size=3, activation='relu'),\n",
        "                     MaxPool2D(2,2),\n",
        "\n",
        "                     Dropout(0.25),\n",
        "\n",
        "                     Flatten(),\n",
        "\n",
        "                     Dense(128, activation='relu'),\n",
        "                     Dense(5, activation='softmax')\n",
        "])\n",
        "\n",
        "model1.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_10\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d_43 (Conv2D)          (None, 98, 98, 32)        896       \n",
            "                                                                 \n",
            " max_pooling2d_43 (MaxPoolin  (None, 49, 49, 32)       0         \n",
            " g2D)                                                            \n",
            "                                                                 \n",
            " conv2d_44 (Conv2D)          (None, 47, 47, 64)        18496     \n",
            "                                                                 \n",
            " max_pooling2d_44 (MaxPoolin  (None, 23, 23, 64)       0         \n",
            " g2D)                                                            \n",
            "                                                                 \n",
            " batch_normalization_10 (Bat  (None, 23, 23, 64)       256       \n",
            " chNormalization)                                                \n",
            "                                                                 \n",
            " conv2d_45 (Conv2D)          (None, 21, 21, 128)       73856     \n",
            "                                                                 \n",
            " max_pooling2d_45 (MaxPoolin  (None, 10, 10, 128)      0         \n",
            " g2D)                                                            \n",
            "                                                                 \n",
            " conv2d_46 (Conv2D)          (None, 8, 8, 256)         295168    \n",
            "                                                                 \n",
            " max_pooling2d_46 (MaxPoolin  (None, 4, 4, 256)        0         \n",
            " g2D)                                                            \n",
            "                                                                 \n",
            " conv2d_47 (Conv2D)          (None, 2, 2, 512)         1180160   \n",
            "                                                                 \n",
            " max_pooling2d_47 (MaxPoolin  (None, 1, 1, 512)        0         \n",
            " g2D)                                                            \n",
            "                                                                 \n",
            " dropout_10 (Dropout)        (None, 1, 1, 512)         0         \n",
            "                                                                 \n",
            " flatten_10 (Flatten)        (None, 512)               0         \n",
            "                                                                 \n",
            " dense_20 (Dense)            (None, 128)               65664     \n",
            "                                                                 \n",
            " dense_21 (Dense)            (None, 5)                 645       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 1,635,141\n",
            "Trainable params: 1,635,013\n",
            "Non-trainable params: 128\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p8dRkIZvUO_T",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "232d5395-f126-4cce-a589-41eb281365d1"
      },
      "source": [
        "model1.compile(loss='categorical_crossentropy',\n",
        "              optimizer=Adam(learning_rate=0.0001),\n",
        "              metrics=['accuracy'])\n",
        "import time\n",
        "\n",
        "start=time.time()\n",
        "history = model1.fit(train_generator,\n",
        "          epochs=50,\n",
        "          #steps_per_epoch=10,\n",
        "          validation_data=val_generator,\n",
        "          verbose=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "107/107 [==============================] - 121s 1s/step - loss: 1.2988 - accuracy: 0.4442 - val_loss: 1.4966 - val_accuracy: 0.5473\n",
            "Epoch 2/50\n",
            "107/107 [==============================] - 119s 1s/step - loss: 1.0796 - accuracy: 0.5716 - val_loss: 1.3550 - val_accuracy: 0.5647\n",
            "Epoch 3/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.9681 - accuracy: 0.6175 - val_loss: 1.2289 - val_accuracy: 0.5709\n",
            "Epoch 4/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.9122 - accuracy: 0.6437 - val_loss: 1.0352 - val_accuracy: 0.6269\n",
            "Epoch 5/50\n",
            "107/107 [==============================] - 116s 1s/step - loss: 0.8684 - accuracy: 0.6617 - val_loss: 0.9501 - val_accuracy: 0.6393\n",
            "Epoch 6/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.8148 - accuracy: 0.6820 - val_loss: 0.8103 - val_accuracy: 0.6915\n",
            "Epoch 7/50\n",
            "107/107 [==============================] - 115s 1s/step - loss: 0.7495 - accuracy: 0.7179 - val_loss: 0.8660 - val_accuracy: 0.6853\n",
            "Epoch 8/50\n",
            "107/107 [==============================] - 116s 1s/step - loss: 0.7515 - accuracy: 0.7061 - val_loss: 0.7497 - val_accuracy: 0.7015\n",
            "Epoch 9/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.7214 - accuracy: 0.7184 - val_loss: 0.9053 - val_accuracy: 0.6704\n",
            "Epoch 10/50\n",
            "107/107 [==============================] - 116s 1s/step - loss: 0.6820 - accuracy: 0.7402 - val_loss: 0.7492 - val_accuracy: 0.7264\n",
            "Epoch 11/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.6765 - accuracy: 0.7455 - val_loss: 0.7596 - val_accuracy: 0.7027\n",
            "Epoch 12/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.6632 - accuracy: 0.7473 - val_loss: 0.7574 - val_accuracy: 0.7226\n",
            "Epoch 13/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.6347 - accuracy: 0.7608 - val_loss: 0.6845 - val_accuracy: 0.7251\n",
            "Epoch 14/50\n",
            "107/107 [==============================] - 119s 1s/step - loss: 0.6202 - accuracy: 0.7646 - val_loss: 0.7004 - val_accuracy: 0.7413\n",
            "Epoch 15/50\n",
            "107/107 [==============================] - 118s 1s/step - loss: 0.5825 - accuracy: 0.7793 - val_loss: 0.6816 - val_accuracy: 0.7450\n",
            "Epoch 16/50\n",
            "107/107 [==============================] - 118s 1s/step - loss: 0.5596 - accuracy: 0.7923 - val_loss: 0.6722 - val_accuracy: 0.7600\n",
            "Epoch 17/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.5451 - accuracy: 0.7994 - val_loss: 0.6690 - val_accuracy: 0.7587\n",
            "Epoch 18/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.5503 - accuracy: 0.7849 - val_loss: 0.6213 - val_accuracy: 0.7612\n",
            "Epoch 19/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.5021 - accuracy: 0.8194 - val_loss: 0.7032 - val_accuracy: 0.7512\n",
            "Epoch 20/50\n",
            "107/107 [==============================] - 118s 1s/step - loss: 0.5047 - accuracy: 0.8155 - val_loss: 0.8323 - val_accuracy: 0.7239\n",
            "Epoch 21/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.4833 - accuracy: 0.8226 - val_loss: 0.6622 - val_accuracy: 0.7438\n",
            "Epoch 22/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.4845 - accuracy: 0.8161 - val_loss: 0.7526 - val_accuracy: 0.7152\n",
            "Epoch 23/50\n",
            "107/107 [==============================] - 118s 1s/step - loss: 0.4274 - accuracy: 0.8405 - val_loss: 0.6986 - val_accuracy: 0.7400\n",
            "Epoch 24/50\n",
            "107/107 [==============================] - 118s 1s/step - loss: 0.4532 - accuracy: 0.8355 - val_loss: 0.7138 - val_accuracy: 0.7425\n",
            "Epoch 25/50\n",
            "107/107 [==============================] - 120s 1s/step - loss: 0.4213 - accuracy: 0.8417 - val_loss: 0.6852 - val_accuracy: 0.7475\n",
            "Epoch 26/50\n",
            "107/107 [==============================] - 118s 1s/step - loss: 0.3996 - accuracy: 0.8514 - val_loss: 0.7043 - val_accuracy: 0.7400\n",
            "Epoch 27/50\n",
            "107/107 [==============================] - 116s 1s/step - loss: 0.3973 - accuracy: 0.8597 - val_loss: 0.8292 - val_accuracy: 0.7102\n",
            "Epoch 28/50\n",
            "107/107 [==============================] - 115s 1s/step - loss: 0.3837 - accuracy: 0.8576 - val_loss: 0.7123 - val_accuracy: 0.7562\n",
            "Epoch 29/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.3461 - accuracy: 0.8747 - val_loss: 0.6846 - val_accuracy: 0.7711\n",
            "Epoch 30/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.3546 - accuracy: 0.8714 - val_loss: 0.7107 - val_accuracy: 0.7525\n",
            "Epoch 31/50\n",
            "107/107 [==============================] - 118s 1s/step - loss: 0.3309 - accuracy: 0.8782 - val_loss: 0.8461 - val_accuracy: 0.7276\n",
            "Epoch 32/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.3197 - accuracy: 0.8882 - val_loss: 0.7658 - val_accuracy: 0.7475\n",
            "Epoch 33/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.3144 - accuracy: 0.8856 - val_loss: 0.7038 - val_accuracy: 0.7687\n",
            "Epoch 34/50\n",
            "107/107 [==============================] - 118s 1s/step - loss: 0.3025 - accuracy: 0.8870 - val_loss: 0.7355 - val_accuracy: 0.7537\n",
            "Epoch 35/50\n",
            "107/107 [==============================] - 118s 1s/step - loss: 0.2779 - accuracy: 0.8970 - val_loss: 0.8061 - val_accuracy: 0.7313\n",
            "Epoch 36/50\n",
            "107/107 [==============================] - 119s 1s/step - loss: 0.2702 - accuracy: 0.9020 - val_loss: 0.6698 - val_accuracy: 0.7687\n",
            "Epoch 37/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.2543 - accuracy: 0.9082 - val_loss: 0.7711 - val_accuracy: 0.7463\n",
            "Epoch 38/50\n",
            "107/107 [==============================] - 118s 1s/step - loss: 0.2249 - accuracy: 0.9238 - val_loss: 0.8122 - val_accuracy: 0.7450\n",
            "Epoch 39/50\n",
            "107/107 [==============================] - 115s 1s/step - loss: 0.2276 - accuracy: 0.9223 - val_loss: 0.7912 - val_accuracy: 0.7475\n",
            "Epoch 40/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.2204 - accuracy: 0.9200 - val_loss: 0.7223 - val_accuracy: 0.7587\n",
            "Epoch 41/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.2348 - accuracy: 0.9132 - val_loss: 0.7445 - val_accuracy: 0.7525\n",
            "Epoch 42/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.2023 - accuracy: 0.9256 - val_loss: 0.8896 - val_accuracy: 0.7413\n",
            "Epoch 43/50\n",
            "107/107 [==============================] - 116s 1s/step - loss: 0.1960 - accuracy: 0.9309 - val_loss: 0.7997 - val_accuracy: 0.7400\n",
            "Epoch 44/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.1913 - accuracy: 0.9315 - val_loss: 0.7872 - val_accuracy: 0.7612\n",
            "Epoch 45/50\n",
            "107/107 [==============================] - 119s 1s/step - loss: 0.1735 - accuracy: 0.9412 - val_loss: 0.7808 - val_accuracy: 0.7724\n",
            "Epoch 46/50\n",
            "107/107 [==============================] - 118s 1s/step - loss: 0.1722 - accuracy: 0.9367 - val_loss: 0.7430 - val_accuracy: 0.7649\n",
            "Epoch 47/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.1796 - accuracy: 0.9315 - val_loss: 1.1681 - val_accuracy: 0.6891\n",
            "Epoch 48/50\n",
            "107/107 [==============================] - 116s 1s/step - loss: 0.1494 - accuracy: 0.9479 - val_loss: 0.7445 - val_accuracy: 0.7786\n",
            "Epoch 49/50\n",
            "107/107 [==============================] - 118s 1s/step - loss: 0.1879 - accuracy: 0.9303 - val_loss: 1.0393 - val_accuracy: 0.7189\n",
            "Epoch 50/50\n",
            "107/107 [==============================] - 117s 1s/step - loss: 0.1336 - accuracy: 0.9518 - val_loss: 0.8010 - val_accuracy: 0.7674\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cEvfrQKGOLSZ",
        "outputId": "46e3fdd1-a2e7-47b0-97a1-25e768ba6ed3"
      },
      "source": [
        "score = model1.evaluate(train_generator)\n",
        "\n",
        "print('Loss: {:.2f}'.format(score[0]))\n",
        "print('Accuracy: {:.2f}'.format(score[1]))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "107/107 [==============================] - 36s 335ms/step - loss: 0.0863 - accuracy: 0.9753\n",
            "Loss: 0.09\n",
            "Accuracy: 0.98\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ue60K2g3OPK7",
        "outputId": "1f8d3964-998e-4093-8a9c-268f8985c24c"
      },
      "source": [
        "score = model1.evaluate(val_generator)\n",
        "\n",
        "print('Loss: {:.2f}'.format(score[0]))\n",
        "print('Accuracy: {:.2f}'.format(score[1]))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "26/26 [==============================] - 6s 243ms/step - loss: 0.8010 - accuracy: 0.7674\n",
            "Loss: 0.80\n",
            "Accuracy: 0.77\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 462
        },
        "id": "fGGvejEeOYuT",
        "outputId": "7d2e341b-f9fa-4697-ebf2-4e347297fed7"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "plt.style.use(\"ggplot\")\n",
        "plt.figure(figsize=(12,7))\n",
        "plt.plot(history.history[\"loss\"], label=\"train_loss\")\n",
        "plt.plot(history.history[\"val_loss\"], label=\"val_loss\")\n",
        "plt.title(\"Loss Plot\")\n",
        "plt.xlabel(\"Epoch #\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x504 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 462
        },
        "id": "qqHp7dExOcyy",
        "outputId": "62158399-6abf-447d-a3a4-e09c3f0ab109"
      },
      "source": [
        "plt.style.use(\"ggplot\")\n",
        "plt.figure(figsize=(12,7))\n",
        "plt.plot(history.history[\"accuracy\"], label=\"train_acc\")\n",
        "plt.plot(history.history[\"val_accuracy\"], label=\"val_acc\")\n",
        "plt.title(\"Accuracy Plot\")\n",
        "plt.xlabel(\"Epoch #\")\n",
        "plt.ylabel(\"Acc\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x504 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h0EdAapgOhT4",
        "outputId": "5babfd8d-04c5-44a5-ef27-5cf0740f08f8"
      },
      "source": [
        "score = model1.evaluate(test_generator)\n",
        "\n",
        "print('Loss: {:.2f}'.format(score[0]))\n",
        "print('Accuracy: {:.2f}'.format(score[1]))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2/2 [==============================] - 2s 554ms/step - loss: 0.8570 - accuracy: 0.7021\n",
            "Loss: 0.86\n",
            "Accuracy: 0.70\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eOkbWbKvOpcu"
      },
      "source": [
        "from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc\n",
        "import numpy as np\n",
        "\n",
        "pred = model1.predict(test_generator)\n",
        "labels = (pred > 0.5).astype(np.int)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kNuVTJ1VOtE1",
        "outputId": "891accd7-de89-49bd-da98-918be46216e1"
      },
      "source": [
        "import tensorflow as tf\n",
        "\n",
        "model_ann = tf.keras.models.Sequential([\n",
        "    tf.keras.layers.InputLayer(input_shape=(100,100,3)),\n",
        "    tf.keras.layers.Flatten(),\n",
        "    tf.keras.layers.Dense(32, activation='relu'),\n",
        "    tf.keras.layers.Dense(64, activation='relu'),\n",
        "    tf.keras.layers.Dense(128, activation='relu'),\n",
        "    tf.keras.layers.Dense(256, activation='relu'),\n",
        "    tf.keras.layers.Dense(512, activation='relu'),\n",
        "    tf.keras.layers.Dense(5, activation='softmax'),\n",
        "])\n",
        "\n",
        "model_ann.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_16\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " flatten_16 (Flatten)        (None, 30000)             0         \n",
            "                                                                 \n",
            " dense_44 (Dense)            (None, 32)                960032    \n",
            "                                                                 \n",
            " dense_45 (Dense)            (None, 64)                2112      \n",
            "                                                                 \n",
            " dense_46 (Dense)            (None, 128)               8320      \n",
            "                                                                 \n",
            " dense_47 (Dense)            (None, 256)               33024     \n",
            "                                                                 \n",
            " dense_48 (Dense)            (None, 512)               131584    \n",
            "                                                                 \n",
            " dense_49 (Dense)            (None, 5)                 2565      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 1,137,637\n",
            "Trainable params: 1,137,637\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t-Zq9aivxgmH"
      },
      "source": [
        "from tensorflow.keras.optimizers import Adam\n",
        "\n",
        "# Compile model\n",
        "model_ann.compile(loss='categorical_crossentropy',\n",
        "              optimizer=Adam(learning_rate=0.0001),\n",
        "              metrics=['accuracy'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HVfAG85kyPmx",
        "outputId": "05d05ae7-5e96-4ddd-b5c2-a07d619a73f1"
      },
      "source": [
        "start=time.time()\n",
        "history2 = model_ann.fit(train_generator,\n",
        "          epochs=50,\n",
        "          validation_data=val_generator,\n",
        "          verbose=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "107/107 [==============================] - 22s 199ms/step - loss: 1.5007 - accuracy: 0.3092 - val_loss: 1.3754 - val_accuracy: 0.3731\n",
            "Epoch 2/50\n",
            "107/107 [==============================] - 21s 200ms/step - loss: 1.3091 - accuracy: 0.4281 - val_loss: 1.2990 - val_accuracy: 0.4328\n",
            "Epoch 3/50\n",
            "107/107 [==============================] - 21s 199ms/step - loss: 1.2770 - accuracy: 0.4310 - val_loss: 1.2508 - val_accuracy: 0.4391\n",
            "Epoch 4/50\n",
            "107/107 [==============================] - 21s 198ms/step - loss: 1.2575 - accuracy: 0.4360 - val_loss: 1.2017 - val_accuracy: 0.4590\n",
            "Epoch 5/50\n",
            "107/107 [==============================] - 21s 201ms/step - loss: 1.2354 - accuracy: 0.4578 - val_loss: 1.2815 - val_accuracy: 0.4216\n",
            "Epoch 6/50\n",
            "107/107 [==============================] - 21s 197ms/step - loss: 1.2317 - accuracy: 0.4484 - val_loss: 1.1973 - val_accuracy: 0.4863\n",
            "Epoch 7/50\n",
            "107/107 [==============================] - 21s 200ms/step - loss: 1.2326 - accuracy: 0.4454 - val_loss: 1.2384 - val_accuracy: 0.4639\n",
            "Epoch 8/50\n",
            "107/107 [==============================] - 21s 198ms/step - loss: 1.2233 - accuracy: 0.4622 - val_loss: 1.2056 - val_accuracy: 0.4751\n",
            "Epoch 9/50\n",
            "107/107 [==============================] - 21s 199ms/step - loss: 1.1945 - accuracy: 0.4743 - val_loss: 1.1723 - val_accuracy: 0.4764\n",
            "Epoch 10/50\n",
            "107/107 [==============================] - 21s 197ms/step - loss: 1.2011 - accuracy: 0.4804 - val_loss: 1.2555 - val_accuracy: 0.4303\n",
            "Epoch 11/50\n",
            "107/107 [==============================] - 22s 205ms/step - loss: 1.1884 - accuracy: 0.4857 - val_loss: 1.1838 - val_accuracy: 0.4838\n",
            "Epoch 12/50\n",
            "107/107 [==============================] - 21s 196ms/step - loss: 1.1731 - accuracy: 0.4984 - val_loss: 1.1751 - val_accuracy: 0.5025\n",
            "Epoch 13/50\n",
            "107/107 [==============================] - 22s 206ms/step - loss: 1.1681 - accuracy: 0.4881 - val_loss: 1.1776 - val_accuracy: 0.4876\n",
            "Epoch 14/50\n",
            "107/107 [==============================] - 22s 202ms/step - loss: 1.1740 - accuracy: 0.4875 - val_loss: 1.1896 - val_accuracy: 0.4726\n",
            "Epoch 15/50\n",
            "107/107 [==============================] - 21s 201ms/step - loss: 1.1560 - accuracy: 0.4966 - val_loss: 1.2035 - val_accuracy: 0.4801\n",
            "Epoch 16/50\n",
            "107/107 [==============================] - 21s 200ms/step - loss: 1.1537 - accuracy: 0.5022 - val_loss: 1.1768 - val_accuracy: 0.4938\n",
            "Epoch 17/50\n",
            "107/107 [==============================] - 21s 197ms/step - loss: 1.1465 - accuracy: 0.5022 - val_loss: 1.1521 - val_accuracy: 0.4988\n",
            "Epoch 18/50\n",
            "107/107 [==============================] - 21s 200ms/step - loss: 1.1435 - accuracy: 0.5096 - val_loss: 1.1393 - val_accuracy: 0.5025\n",
            "Epoch 19/50\n",
            "107/107 [==============================] - 21s 199ms/step - loss: 1.1383 - accuracy: 0.5137 - val_loss: 1.1778 - val_accuracy: 0.4913\n",
            "Epoch 20/50\n",
            "107/107 [==============================] - 21s 199ms/step - loss: 1.1309 - accuracy: 0.5231 - val_loss: 1.1790 - val_accuracy: 0.4963\n",
            "Epoch 21/50\n",
            "107/107 [==============================] - 21s 200ms/step - loss: 1.1352 - accuracy: 0.5131 - val_loss: 1.1598 - val_accuracy: 0.5087\n",
            "Epoch 22/50\n",
            "107/107 [==============================] - 21s 201ms/step - loss: 1.1241 - accuracy: 0.5128 - val_loss: 1.1568 - val_accuracy: 0.4888\n",
            "Epoch 23/50\n",
            "107/107 [==============================] - 22s 202ms/step - loss: 1.1178 - accuracy: 0.5225 - val_loss: 1.1355 - val_accuracy: 0.5261\n",
            "Epoch 24/50\n",
            "107/107 [==============================] - 22s 201ms/step - loss: 1.1114 - accuracy: 0.5287 - val_loss: 1.1642 - val_accuracy: 0.5087\n",
            "Epoch 25/50\n",
            "107/107 [==============================] - 21s 201ms/step - loss: 1.1019 - accuracy: 0.5319 - val_loss: 1.1550 - val_accuracy: 0.5062\n",
            "Epoch 26/50\n",
            "107/107 [==============================] - 21s 198ms/step - loss: 1.1069 - accuracy: 0.5331 - val_loss: 1.1400 - val_accuracy: 0.5037\n",
            "Epoch 27/50\n",
            "107/107 [==============================] - 21s 201ms/step - loss: 1.1031 - accuracy: 0.5366 - val_loss: 1.1285 - val_accuracy: 0.5124\n",
            "Epoch 28/50\n",
            "107/107 [==============================] - 21s 201ms/step - loss: 1.0905 - accuracy: 0.5390 - val_loss: 1.1476 - val_accuracy: 0.5137\n",
            "Epoch 29/50\n",
            "107/107 [==============================] - 21s 200ms/step - loss: 1.0902 - accuracy: 0.5399 - val_loss: 1.1460 - val_accuracy: 0.5162\n",
            "Epoch 30/50\n",
            "107/107 [==============================] - 21s 197ms/step - loss: 1.0755 - accuracy: 0.5475 - val_loss: 1.1492 - val_accuracy: 0.5187\n",
            "Epoch 31/50\n",
            "107/107 [==============================] - 21s 199ms/step - loss: 1.0917 - accuracy: 0.5360 - val_loss: 1.1394 - val_accuracy: 0.5087\n",
            "Epoch 32/50\n",
            "107/107 [==============================] - 22s 208ms/step - loss: 1.0835 - accuracy: 0.5357 - val_loss: 1.1295 - val_accuracy: 0.5211\n",
            "Epoch 33/50\n",
            "107/107 [==============================] - 21s 199ms/step - loss: 1.0786 - accuracy: 0.5525 - val_loss: 1.1332 - val_accuracy: 0.5224\n",
            "Epoch 34/50\n",
            "107/107 [==============================] - 21s 198ms/step - loss: 1.0688 - accuracy: 0.5499 - val_loss: 1.1452 - val_accuracy: 0.5149\n",
            "Epoch 35/50\n",
            "107/107 [==============================] - 21s 195ms/step - loss: 1.0686 - accuracy: 0.5613 - val_loss: 1.1544 - val_accuracy: 0.5323\n",
            "Epoch 36/50\n",
            "107/107 [==============================] - 21s 198ms/step - loss: 1.0643 - accuracy: 0.5549 - val_loss: 1.1210 - val_accuracy: 0.5187\n",
            "Epoch 37/50\n",
            "107/107 [==============================] - 21s 194ms/step - loss: 1.0662 - accuracy: 0.5425 - val_loss: 1.1157 - val_accuracy: 0.5373\n",
            "Epoch 38/50\n",
            "107/107 [==============================] - 21s 195ms/step - loss: 1.0662 - accuracy: 0.5519 - val_loss: 1.1447 - val_accuracy: 0.5286\n",
            "Epoch 39/50\n",
            "107/107 [==============================] - 21s 198ms/step - loss: 1.0678 - accuracy: 0.5405 - val_loss: 1.1224 - val_accuracy: 0.5299\n",
            "Epoch 40/50\n",
            "107/107 [==============================] - 22s 203ms/step - loss: 1.0359 - accuracy: 0.5631 - val_loss: 1.1380 - val_accuracy: 0.5249\n",
            "Epoch 41/50\n",
            "107/107 [==============================] - 21s 199ms/step - loss: 1.0387 - accuracy: 0.5572 - val_loss: 1.1299 - val_accuracy: 0.5274\n",
            "Epoch 42/50\n",
            "107/107 [==============================] - 21s 198ms/step - loss: 1.0512 - accuracy: 0.5578 - val_loss: 1.1465 - val_accuracy: 0.5236\n",
            "Epoch 43/50\n",
            "107/107 [==============================] - 21s 196ms/step - loss: 1.0385 - accuracy: 0.5725 - val_loss: 1.1250 - val_accuracy: 0.5373\n",
            "Epoch 44/50\n",
            "107/107 [==============================] - 21s 195ms/step - loss: 1.0240 - accuracy: 0.5711 - val_loss: 1.1431 - val_accuracy: 0.5249\n",
            "Epoch 45/50\n",
            "107/107 [==============================] - 21s 196ms/step - loss: 1.0272 - accuracy: 0.5731 - val_loss: 1.1296 - val_accuracy: 0.5410\n",
            "Epoch 46/50\n",
            "107/107 [==============================] - 21s 196ms/step - loss: 1.0309 - accuracy: 0.5731 - val_loss: 1.1366 - val_accuracy: 0.5361\n",
            "Epoch 47/50\n",
            "107/107 [==============================] - 21s 195ms/step - loss: 1.0217 - accuracy: 0.5716 - val_loss: 1.1529 - val_accuracy: 0.5423\n",
            "Epoch 48/50\n",
            "107/107 [==============================] - 21s 195ms/step - loss: 1.0174 - accuracy: 0.5728 - val_loss: 1.1513 - val_accuracy: 0.5137\n",
            "Epoch 49/50\n",
            "107/107 [==============================] - 21s 197ms/step - loss: 1.0171 - accuracy: 0.5752 - val_loss: 1.1341 - val_accuracy: 0.5398\n",
            "Epoch 50/50\n",
            "107/107 [==============================] - 21s 196ms/step - loss: 1.0225 - accuracy: 0.5672 - val_loss: 1.1213 - val_accuracy: 0.5398\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ftevleJ637pf",
        "outputId": "fd20cfab-6d0a-4fd3-ef84-6186f663357e"
      },
      "source": [
        "print(\"waktu = \", time.time() - start, \"detik\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "waktu =  1563.029860496521 detik\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rcVdRwzs3_Ks",
        "outputId": "43b32ab1-221b-4b3c-dd2f-bb886d2e9c5d"
      },
      "source": [
        "score = model_ann.evaluate(train_generator)\n",
        "\n",
        "print('Loss: {:.2f}'.format(score[0]))\n",
        "print('Accuracy: {:.2f}'.format(score[1]))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "107/107 [==============================] - 18s 168ms/step - loss: 0.9849 - accuracy: 0.5881\n",
            "Loss: 0.98\n",
            "Accuracy: 0.59\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y9nIHz8n4EGe",
        "outputId": "c5922108-4ccd-4be5-ebd5-835033a7a75a"
      },
      "source": [
        "score = model_ann.evaluate(val_generator)\n",
        "\n",
        "print('Loss: {:.2f}'.format(score[0]))\n",
        "print('Accuracy: {:.2f}'.format(score[1]))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "26/26 [==============================] - 2s 90ms/step - loss: 1.1213 - accuracy: 0.5398\n",
            "Loss: 1.12\n",
            "Accuracy: 0.54\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 462
        },
        "id": "epFDc7RV4Mt0",
        "outputId": "023153cd-af08-4ec4-d1dd-a820320dd1fd"
      },
      "source": [
        "plt.style.use(\"ggplot\")\n",
        "plt.figure(figsize=(12,7))\n",
        "plt.plot(history2.history[\"loss\"], label=\"train_loss\")\n",
        "plt.plot(history2.history[\"val_loss\"], label=\"val_loss\")\n",
        "plt.title(\"Loss Plot\")\n",
        "plt.xlabel(\"Epoch #\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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ssQmqGdaRERE5IDp06fz/vvvs2DBAs4991zKysrweDxERETw3//+l127drX4M0eNGsW7774LwJYtW9i9ezfp6els376dPn36cO211zJ58mQ2btzInj17cLlcXHDBBcycOZO1a9cG+0tskto8WskSnwDrV4e6DBEREZFjwoABA6ioqCAlJYVu3brxs5/9jKuuuooJEyZw/PHHk5GR0eLPvOqqq7j77ruZMGECVquVJ554AofDwQcffMDbb7+NzWYjOTmZX/3qV3z33Xf84Q9/wDAMIiIi+OMf/9gOX2VjhmmaZodcqZ3k5uaG5LrOT9+n4o2XsDz7DoZNP5N0dR6Ph4KCglCXIR1E9zu86H6Hn654zysrK4mMjAx1Gcckm82Gz+dr0Xua+n6mpqY2ea7aPFrJEptQ94syjRQXERERCVdaUm0lS9yBMF1aDPGJoS1GREREpJPZuHEjN99880GvORwOPvzwwxBV1DoK0610UJgWERERCaHO2LU7aNAgFi1aFOoymtSS76faPFqpPkxrezwREREJNYvF0uK+YGmaz+fDYml+RNbKdCtZG1amNQVRREREQsvpdOL1eqmurm7RhMFw4HA4mr2/tWmaWCwWnE5nsz9fYbqVDKcLHE61eYiIiEjIGYaBy+UKdRnHpPbevUVtHm3hjlOYFhEREQljCtNt4Y5Tz7SIiIhIGFOYbgt3HJSoZ1pEREQkXClMt4HhjoMyrUyLiIiIhCuF6bZwx0F5Gaa2ohEREREJSwrTbeGOq/tnuUaKi4iIiIQjhek2MOrDtB5CFBEREQlLCtNt4Y6v+2eJwrSIiIhIOFKYbosDK9PaHk9EREQkPClMt4XaPERERETCmsJ0GxhOF9gdCtMiIiIiYUphuq00UlxEREQkbClMt1VsPGappiCKiIiIhCOF6baK0cq0iIiISLhSmG4jQ20eIiIiImFLYbqt3HFQUYbp94e6EhERERHpYArTbRUbB6YJZRopLiIiIhJuFKbb6IeR4noIUURERCTcKEy3lQa3iIiIiIQthem20khxERERkbClMN1WWpkWERERCVsK023l0EhxERERkXClMN1GhmHUrU6XKEyLiIiIhBuF6WBwx2GWKUyLiIiIhBuF6WDQFEQRERGRsKQwHQQaKS4iIiISnhSmg8EdD+WlGikuIiIiEmYUpoPBrZHiIiIiIuFIYToI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pXHHHXfg5SW/Is8WpmkyY8YMwsPDmTFjhsT7LHb77bfj6+uLYRhYLBaee+65Nn89lwWIzWCaJs888wyPPPIIv/rVr3j33Xfp1asXwcHBnh6acKGAgADGjx/Ppk2bOP/88wH46KOPSEpK4p577sFms7Fjxw769evn4ZEKV2hoaKBbt25ce+21jBkzhjfffJO+ffuyePFiiflZyDAMRo0axYUXXsiECRP48MMPSUpK4pNPPmH8+PHccsst7Ny5E5vNRteuXT09XOEiCxYswG63Y7fbGTVqFG+++abE+yy1cOFCZs6cySWXXMLEiROBtv8dLmUezbB//35iY2OJiYnBy8uLkSNHsmnTJk8PS7hYr169fvYX66ZNmxg7diwAY8eOlbifRcLCwo6v8vbz8yMhIYGysjKJ+VlKKYWvry8ADocDh8OBUordu3czfPhwAMaNGyfxPouUlpaydetWJkyYAIDWWuLdybT167m8p9EMZWVlREREHL8fERHBvn37PDgi4S4VFRWEhYUBEBoaSkVFhYdHJNpCUVERBw8eJD09XWJ+FjNNkwcffJCCggLOP/98YmJi8Pf3x2KxABAeHk5ZWZmHRylc5b333uP666+nrq4OgKqqKon3We7pp58GYNKkSUycOLHNX88lmRaimZRSKKU8PQzhYvX19cyaNYsbbrgBf3//Ex6TmJ9dDMPgxRdfpKamhpdeeom8vDxPD0m0kS1bthASEkJaWhq7d+/29HCEG8ycOZPw8HAqKip46qmniI+PP+Hxtng9l2S6GcLDwyktLT1+v7S0lPDwcA+OSLhLSEgINpuNsLAwbDab1MmfZex2O7NmzWL06NGcc845gMS8MwgICKB3795kZWVRW1uLw+HAYrFQVlYmr+1niczMTDZv3sy2bdtobGykrq6O9957T+J9Fvs+liEhIQwdOpT9+/e3+eu51Ew3Q9euXcnPz6eoqAi73c7atWsZMmSIp4cl3GDIkCGsWrUKgFWrVjF06FAPj0i4itaaN954g4SEBC6++OLjX5eYn50qKyupqakBnJ09duzYQUJCAr1792b9+vUArFy5Ul7bzxLXXXcdb7zxBq+//jp33303ffr04c4775R4n6Xq6+uPl/PU19ezY8cOkpOT2/z1XHZAbKatW7fy/vvvY5om48eP5/LLL/f0kISLzZ49mz179lBVVUVISAjTpk1j6NChvPLKK5SUlEibtLPM3r17eeyxx0hOTj7+1t+1115LRkaGxPwsdPjwYV5//XVM00RrzYgRI7jyyispLCxk9uzZVFdX06VLF+644w6sVqunhytcaPfu3cybN48ZM2ZIvM9ShYWFvPTSS4BzgfGoUaO4/PLLqaqqatPXc0mmhRBCCCGEaCEp8xBCCCGEEKKFJJkWQgghhBCihSSZFkIIIYQQooUkmRZCCCGEEKKFJJkWQgghhBCihSSZFkIIwbRp0ygoKPD0MIQQosORHRCFEKKduf322ykvL8cwfpjvGDduHNOnT/fgqE7uyy+/pLS0lOuuu47HH3+cm266iZSUFE8PSwgh3EaSaSGEaIcefPBB+vXr5+lhnFZ2djaDBg3CNE1yc3NJTEz09JCEEMKtJJkWQogOZOXKlSxbtozU1FRWr15NWFgY06dPp2/fvgCUlZXx9ttvs3fvXgIDA5k6dSoTJ04EwDRN5s6dy4oVK6ioqCAuLo7777+fyMhIAHbs2MEzzzxDZWUlo0aNYvr06cd3hTyV7OxsrrzySvLy8oiKisJisbTtP4AQQrQzkkwLIUQHs2/fPs455xzeeecdNm7cyEsvvcTrr79OYGAgr776KklJSbz55pvk5eUxc+ZMYmNj6dOnD/Pnz2fNmjU89NBDxMXFcfjwYXx8fI4fd+vWrTz77LPU1dXx4IMPMmTIEAYMGPCz8zc1NfG73/0OrTX19fXcf//92O12TNPkhhtu4NJLL+Xyyy935z+JEEJ4jCTTQgjRDr344osnzPJef/31x2eYQ0JCuOiii1BKMXLkSObNm8fWrVvp1asXe/fuZcaMGXh7e5OamsqECRNYtWoVffr0YdmyZVx//fXEx8cDkJqaesI5L7vsMgICAggICKB3794cOnTopMm01WrlvffeY9myZRw9epQbbriBp556imuuuYb09PS2+0cRQoh2SJJpIYRoh+6///5T1kyHh4efUH4RFRVFWVkZNpuNwMBA/Pz8jj8WGRnJgQMHACgtLSUmJuaU5wwNDT1+28fHh/r6+pN+3+zZs9m+fTsNDQ1YrVZWrFhBfX09+/fvJy4ujmeffbZZz1UIIToySaaFEKKDKSsrQ2t9PKEuKSlhyJAhhIWFUV1dTV1d3fGEuqSkhPDwcAAiIiIoLCwkOTm5Vee/++67MU2Tm2++mbfeeostW7awbt067rzzztY9MSGE6ICkz7QQQnQwFRUVLFq0CLvdzrp168jNzWXgwIFERkbSvXt3/vWvf9HY2Mjhw4dZsWIFo0ePBmDChAn85z//IT8/H601hw8fpqqqqkVjyM3NJSYmBsMwOHjwIF27dnXlUxRCiA5DZqaFEKIdev7550/oM92vXz/uv/9+ADIyMsjPz2f69OmEhoZy7733EhQUBMBdd93F22+/zS233EJgYCBXXXXV8XKRiy++mKamJp566imqqqpISEjgD3/4Q4vGl52dTZcuXY7fnjp1amuerhBCdFhKa609PQghhBBn5vvWeDNnzvT0UIQQQiBlHkIIIYQQQrSYJNNCCCGEEEK0kJR5CCGEEEII0UIyMy2EEEIIIUQLSTIthBBCCCFEC0kyLYQQQgghRAtJMi2EEEIIIUQLSTIthBBCCCFEC/1/+ggGP9+Gg2cAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 864x504 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 462
        },
        "id": "Uk_V5BxF4RM6",
        "outputId": "34522e6e-37da-4d50-89ce-45a679d5398b"
      },
      "source": [
        "plt.style.use(\"ggplot\")\n",
        "plt.figure(figsize=(12,7))\n",
        "plt.plot(history2.history[\"accuracy\"], label=\"train_acc\")\n",
        "plt.plot(history2.history[\"val_accuracy\"], label=\"val_acc\")\n",
        "plt.title(\"Accuracy Plot\")\n",
        "plt.xlabel(\"Epoch #\")\n",
        "plt.ylabel(\"Acc\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x504 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AJS_w3xl4i_4",
        "outputId": "3c0ced9d-61b4-4615-908c-ea0bf6715db2"
      },
      "source": [
        "score = model_ann.evaluate(test_generator)\n",
        "\n",
        "print('Loss: {:.2f}'.format(score[0]))\n",
        "print('Accuracy: {:.2f}'.format(score[1]))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2/2 [==============================] - 0s 93ms/step - loss: 1.3437 - accuracy: 0.3830\n",
            "Loss: 1.34\n",
            "Accuracy: 0.38\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZQ2aTcHC4phM"
      },
      "source": [
        "pred2 = model_ann.predict(test_generator)\n",
        "labels = (pred2 > 0.5).astype(np.int)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NoAqkZE34uyQ"
      },
      "source": [
        "model1.save(\"model1_bunga.h5\")\n",
        "model_ann.save(\"model2_bunga.h5\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "\n",
        "model = tf.keras.models.load_model('model1_bunga.h5')\n",
        "converter = tf.lite.TFLiteConverter.from_keras_model(model)\n",
        "tflite_model = converter.convert()\n",
        "open(\"model1_bunga.tflite\", \"wb\").write(tflite_model)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c9B-EnjeAT94",
        "outputId": "7324ac79-9ad9-4bbb-ffd2-a7e327a64281"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /tmp/tmpqexz9ds1/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:tensorflow:Assets written to: /tmp/tmpqexz9ds1/assets\n",
            "WARNING:absl:Buffer deduplication procedure will be skipped when flatbuffer library is not properly loaded\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6545660"
            ]
          },
          "metadata": {},
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = tf.keras.models.load_model('model2_bunga.h5')\n",
        "converter = tf.lite.TFLiteConverter.from_keras_model(model)\n",
        "tflite_model = converter.convert()\n",
        "open(\"model2_bunga.tflite\", \"wb\").write(tflite_model)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AyGqPJxHH6b9",
        "outputId": "a353457e-b9d6-4fd8-c4b8-1d25baeb48d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /tmp/tmp6p12d3_4/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:tensorflow:Assets written to: /tmp/tmp6p12d3_4/assets\n",
            "WARNING:absl:Buffer deduplication procedure will be skipped when flatbuffer library is not properly loaded\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4553868"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4znbPGTj405Q"
      },
      "source": [
        "import tensorflow as tf\n",
        "from tensorboard.plugins.hparams import api as hp"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IFI0FTH-48X1"
      },
      "source": [
        "%load_ext tensorboard"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sUDu6eNq49Mm"
      },
      "source": [
        "!rm -rf ./logs/"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ULnrSaHN4_br"
      },
      "source": [
        "HP_NUM_UNITS = hp.HParam('num_units', hp.Discrete([32,64,128]))\n",
        "HP_DROPOUT = hp.HParam('dropout', hp.RealInterval(0.2, 0.5))\n",
        "HP_OPTIMIZER = hp.HParam('optimizer', hp.Discrete(['adam', 'rmsprop', 'adadelta']))\n",
        "\n",
        "METRIC_ACCURACY = 'accuracy'\n",
        "\n",
        "with tf.summary.create_file_writer('logs/hparam_tuning').as_default():\n",
        "  hp.hparams_config(\n",
        "    hparams=[HP_NUM_UNITS, HP_DROPOUT, HP_OPTIMIZER],\n",
        "    metrics=[hp.Metric(METRIC_ACCURACY, display_name='Accuracy')],\n",
        "  )"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AkmqBqy35Cgx"
      },
      "source": [
        "# xvl, yvl = zip(*(val_generator[i] for i in range(len(val_generator))))\n",
        "# x_val, y_val = np.vstack(xvl), np.vstack(yvl)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S-YJ-_nI5FqD"
      },
      "source": [
        "from tensorflow.keras import layers\n",
        "from tensorflow.keras import Model\n",
        "from tensorflow.keras.layers import InputLayer, Activation, Dense, Conv2D, MaxPool2D, Dropout, Flatten, BatchNormalization\n",
        "from tensorflow.keras.models import Sequential\n",
        "\n",
        "def train_test_model(hparams):\n",
        "  model_hparams = Sequential()\n",
        "\n",
        "  model_hparams.add(InputLayer(input_shape=[250,250,3]))\n",
        "\n",
        "  model_hparams.add(Conv2D(filters=4, kernel_size=3, strides=1, padding='same', activation='relu'))\n",
        "  model_hparams.add(Conv2D(filters=8, kernel_size=3, strides=1, padding='same', activation='relu'))\n",
        "  model_hparams.add(BatchNormalization())\n",
        "  model_hparams.add(MaxPool2D(pool_size=2, padding='same'))\n",
        "\n",
        "  model_hparams.add(Conv2D(filters=16, kernel_size=3, strides=1, padding='same', activation='relu'))\n",
        "  model_hparams.add(BatchNormalization())\n",
        "  model_hparams.add(MaxPool2D(pool_size=2, padding='same'))\n",
        "\n",
        "  model_hparams.add(Conv2D(filters=32, kernel_size=3, strides=1, padding='same', activation='relu'))\n",
        "  model_hparams.add(BatchNormalization())\n",
        "  model_hparams.add(MaxPool2D(pool_size=2, padding='same'))\n",
        "\n",
        "  model_hparams.add(Conv2D(filters=64, kernel_size=3, strides=1, padding='same', activation='relu'))\n",
        "  model_hparams.add(BatchNormalization())\n",
        "  model_hparams.add(MaxPool2D(pool_size=2, padding='same'))\n",
        "\n",
        "  model_hparams.add(Conv2D(filters=128, kernel_size=3, strides=1, padding='same', activation='relu'))\n",
        "  model_hparams.add(BatchNormalization())\n",
        "  model_hparams.add(MaxPool2D(pool_size=2, padding='same'))\n",
        "\n",
        "  model_hparams.add(Conv2D(filters=8, kernel_size=3, strides=1, padding='same', activation='relu'))\n",
        "  model_hparams.add(BatchNormalization())\n",
        "  model_hparams.add(MaxPool2D(pool_size=2, padding='same'))\n",
        "  model_hparams.add(Dropout(hparams[HP_DROPOUT]))\n",
        "\n",
        "  model_hparams.add(Flatten())\n",
        "\n",
        "  # Fully Connected Layer\n",
        "  model_hparams.add(Dense(hparams[HP_NUM_UNITS], activation='relu'))\n",
        "  model_hparams.add(Dropout(hparams[HP_DROPOUT]))\n",
        "  model_hparams.add(Dense(1, activation='softmax'))\n",
        "  \n",
        "  model_hparams.compile(\n",
        "      optimizer=hparams[HP_OPTIMIZER],\n",
        "      loss='categorical_crossentropy',\n",
        "      metrics=['accuracy'],\n",
        "  )\n",
        "\n",
        "  # model.fit(x_train, y_train, epochs=10) \n",
        "  model_hparams.fit(train_generator, epochs=50, validation_data=val_generator, verbose=1)\n",
        "  _, accuracy = model_hparams.evaluate(x_val, y_val)\n",
        "  return accuracy"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fcc10qdd5Ioh"
      },
      "source": [
        "def run(run_dir, hparams):\n",
        "  with tf.summary.create_file_writer(run_dir).as_default():\n",
        "    hp.hparams(hparams)  # record the values used in this trial\n",
        "    accuracy = train_test_model(hparams)\n",
        "    tf.summary.scalar(METRIC_ACCURACY, accuracy, step=50)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rPYTBirW5K8Y",
        "outputId": "9cabf52c-ef49-4468-8bcd-6920ae945aa6"
      },
      "source": [
        "['adam', 'sgd', 'adadelta', 'rmsprop', 'adamx', 'nadam']"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['adam', 'sgd', 'adadelta', 'rmsprop', 'adamx', 'nadam']"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "t6wklzJr5NTz",
        "outputId": "184e8331-589c-46d0-df7d-ad99e737e69a"
      },
      "source": [
        "session_num = 0\n",
        "\n",
        "for num_units in HP_NUM_UNITS.domain.values:\n",
        "  for dropout_rate in (HP_DROPOUT.domain.min_value, HP_DROPOUT.domain.max_value):\n",
        "    for optimizer in HP_OPTIMIZER.domain.values:\n",
        "      hparams = {\n",
        "          HP_NUM_UNITS: num_units,\n",
        "          HP_DROPOUT: dropout_rate,\n",
        "          HP_OPTIMIZER: optimizer,\n",
        "      }\n",
        "      run_name = \"run-%d\" % session_num\n",
        "      print('--- Starting trial: %s' % run_name)\n",
        "      print({h.name: hparams[h] for h in hparams})\n",
        "      run('logs/hparam_tuning/' + run_name, hparams)\n",
        "      session_num += 1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Starting trial: run-0\n",
            "{'num_units': 32, 'dropout': 0.2, 'optimizer': 'adadelta'}\n",
            "Epoch 1/50\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "InvalidArgumentError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-45-817954b1c171>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m       \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'--- Starting trial: %s'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mrun_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m       \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mhparams\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mh\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mh\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mhparams\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m       \u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'logs/hparam_tuning/'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mrun_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m       \u001b[0msession_num\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-43-7179ef6b4886>\u001b[0m in \u001b[0;36mrun\u001b[0;34m(run_dir, hparams)\u001b[0m\n\u001b[1;32m      2\u001b[0m   \u001b[0;32mwith\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msummary\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcreate_file_writer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_dir\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_default\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mhp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhparams\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhparams\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# record the values used in this trial\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_test_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m     \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msummary\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mMETRIC_ACCURACY\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccuracy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstep\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-42-17b261461118>\u001b[0m in \u001b[0;36mtrain_test_model\u001b[0;34m(hparams)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m   \u001b[0;31m# model.fit(x_train, y_train, epochs=10)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m   \u001b[0mmodel_hparams\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_generator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mval_generator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m   \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel_hparams\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_val\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0maccuracy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 59\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     60\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mInvalidArgumentError\u001b[0m:  Matrix size-incompatible: In[0]: [7,5], In[1]: [32,1]\n\t [[node gradient_tape/sequential_2/dense_7/MatMul/MatMul\n (defined at /usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/optimizer_v2.py:464)\n]] [Op:__inference_train_function_77415]\n\nErrors may have originated from an input operation.\nInput Source operations connected to node gradient_tape/sequential_2/dense_7/MatMul/MatMul:\nIn[0] gradient_tape/categorical_crossentropy/softmax_cross_entropy_with_logits/Reshape_1:\t\nIn[1] sequential_2/dense_7/MatMul/ReadVariableOp (defined at /usr/local/lib/python3.7/dist-packages/keras/layers/core/dense.py:199)\n\nOperation defined at: (most recent call last)\n>>>   File \"/usr/lib/python3.7/runpy.py\", line 193, in _run_module_as_main\n>>>     \"__main__\", mod_spec)\n>>> \n>>>   File \"/usr/lib/python3.7/runpy.py\", line 85, in _run_code\n>>>     exec(code, run_globals)\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py\", line 16, in <module>\n>>>     app.launch_new_instance()\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/traitlets/config/application.py\", line 846, in launch_instance\n>>>     app.start()\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/ipykernel/kernelapp.py\", line 499, in start\n>>>     self.io_loop.start()\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/tornado/platform/asyncio.py\", line 132, in start\n>>>     self.asyncio_loop.run_forever()\n>>> \n>>>   File \"/usr/lib/python3.7/asyncio/base_events.py\", line 541, in run_forever\n>>>     self._run_once()\n>>> \n>>>   File \"/usr/lib/python3.7/asyncio/base_events.py\", line 1786, in _run_once\n>>>     handle._run()\n>>> \n>>>   File \"/usr/lib/python3.7/asyncio/events.py\", line 88, in _run\n>>>     self._context.run(self._callback, *self._args)\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/tornado/ioloop.py\", line 758, in _run_callback\n>>>     ret = callback()\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/tornado/stack_context.py\", line 300, in null_wrapper\n>>>     return fn(*args, **kwargs)\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/zmq/eventloop/zmqstream.py\", line 536, in <lambda>\n>>>     self.io_loop.add_callback(lambda: self._handle_events(self.socket, 0))\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/zmq/eventloop/zmqstream.py\", line 452, in _handle_events\n>>>     self._handle_recv()\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/zmq/eventloop/zmqstream.py\", line 481, in _handle_recv\n>>>     self._run_callback(callback, msg)\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/zmq/eventloop/zmqstream.py\", line 431, in _run_callback\n>>>     callback(*args, **kwargs)\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/tornado/stack_context.py\", line 300, in null_wrapper\n>>>     return fn(*args, **kwargs)\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\", line 283, in dispatcher\n>>>     return self.dispatch_shell(stream, msg)\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\", line 233, in dispatch_shell\n>>>     handler(stream, idents, msg)\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\", line 399, in execute_request\n>>>     user_expressions, allow_stdin)\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/ipykernel/ipkernel.py\", line 208, in do_execute\n>>>     res = shell.run_cell(code, store_history=store_history, silent=silent)\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/ipykernel/zmqshell.py\", line 537, in run_cell\n>>>     return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\", line 2718, in run_cell\n>>>     interactivity=interactivity, compiler=compiler, result=result)\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\", line 2822, in run_ast_nodes\n>>>     if self.run_code(code, result):\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\", line 2882, in run_code\n>>>     exec(code_obj, self.user_global_ns, self.user_ns)\n>>> \n>>>   File \"<ipython-input-45-817954b1c171>\", line 14, in <module>\n>>>     run('logs/hparam_tuning/' + run_name, hparams)\n>>> \n>>>   File \"<ipython-input-43-7179ef6b4886>\", line 4, in run\n>>>     accuracy = train_test_model(hparams)\n>>> \n>>>   File \"<ipython-input-42-17b261461118>\", line 51, in train_test_model\n>>>     model_hparams.fit(train_generator, epochs=50, validation_data=val_generator, verbose=1)\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 64, in error_handler\n>>>     return fn(*args, **kwargs)\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1216, in fit\n>>>     tmp_logs = self.train_function(iterator)\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 878, in train_function\n>>>     return step_function(self, iterator)\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 867, in step_function\n>>>     outputs = model.distribute_strategy.run(run_step, args=(data,))\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 860, in run_step\n>>>     outputs = model.train_step(data)\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 816, in train_step\n>>>     self.optimizer.minimize(loss, self.trainable_variables, tape=tape)\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/optimizer_v2.py\", line 531, in minimize\n>>>     loss, var_list=var_list, grad_loss=grad_loss, tape=tape)\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/optimizer_v2.py\", line 583, in _compute_gradients\n>>>     grads_and_vars = self._get_gradients(tape, loss, var_list, grad_loss)\n>>> \n>>>   File \"/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/optimizer_v2.py\", line 464, in _get_gradients\n>>>     grads = tape.gradient(loss, var_list, grad_loss)\n>>> "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zd8m_JiC5RFd"
      },
      "source": [
        "# import zipfile\n",
        "\n",
        "# hparams_demo_logs = zipfile.ZipFile('hparams_demo_logs.zip', 'r')\n",
        "# hparams_demo_logs.extractall('logs/hparam_demo.zip')\n",
        "\n",
        "# hparams_demo_logs.close()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ozoXvQFL5V5_"
      },
      "source": [
        "%%bash\n",
        "wget -q 'https://storage.googleapis.com/download.tensorflow.org/tensorboard/hparams_demo_logs.zip'\n",
        "unzip -q hparams_demo_logs.zip -d logs/hparam_demo"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jc7PPL_35Z5o"
      },
      "source": [
        "%tensorboard --logdir logs/hparam_tuning"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}